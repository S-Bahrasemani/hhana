#!/usr/bin/env python

from rootpy.io import root_open
import ROOT
from root_numpy import tree2array, array2tree, rec2array
from matplotlib.mlab import rec_append_fields
import numpy as np
from moments import HCM
infile = root_open('ntuples/v6/hhskim/hhskim.root', 'r')
outfile = root_open('ntuples/v6/hhskim/new_hhskim.root', 'w')
import rootpy

for tree in infile.objects():#cls=ROOT.TTree):

    print "COPYING : ", tree.GetName()
    if type(tree) is rootpy.tree.tree.Tree:
        rec = tree2array(tree)
        new_rec = rec_append_fields(rec,
            names='dEta_jets',
            arrs=np.absolute(rec['tau_2_eta']-rec['tau_3_eta']),
            dtypes=np.dtype('f8'))
        out_tree = array2tree(rec)
    outfile.cd()
    out_tree.Write(tree.GetName())

#    mom_branches = [
#        'tau_0_pt', 'tau_0_eta', 'tau_0_phi', 'tau_0_m',
#        'tau_1_pt', 'tau_1_eta', 'tau_1_phi', 'tau_1_m',
#        'jet_0_pt', 'jet_0_eta', 'jet_0_phi', 'jet_0_m',
#        'jet_1_pt', 'jet_1_eta', 'jet_1_phi', 'jet_1_m',
#    ]
#
#    mom_arr = rec[mom_branches]
#    mom_arr = rec2array( mom_arr ).reshape((mom_arr.shape[0], 4, 4))
#    # convert array of pT, eta, phi, m
#    # to array of p, px, py, pz, pT, eta, phi, m
#    kin_arr = np.empty(shape=(mom_arr.shape[0], 4, 8))
#    # |p| = pT cosh eta
#    kin_arr[:,:,0] = mom_arr[:,:,0] * np.cosh(mom_arr[:,:,1])
#    # px, py, pz
#    kin_arr[:,:,1] = mom_arr[:,:,0] * np.cos(mom_arr[:,:,2])
#    kin_arr[:,:,2] = mom_arr[:,:,0] * np.sin(mom_arr[:,:,2])
#    kin_arr[:,:,3] = mom_arr[:,:,0] * np.sinh(mom_arr[:,:,1])
#    # pT, eta, phi, m
#    kin_arr[:,:,4] = mom_arr[:,:,0]
#    kin_arr[:,:,5] = mom_arr[:,:,1]
#    kin_arr[:,:,6] = mom_arr[:,:,2]
#    kin_arr[:,:,7] = mom_arr[:,:,3]
#    rec3_moments = HCM( 3, kin_arr[:,:,:])#, kin_arr[:,:,:] )
#
## VBF Variables
#    rec = rec_append_fields(rec,
#        names='dEta_jets',
#        arrs=np.absolute(kin_arr[:,2,5]-kin_arr[:,3,5]),
#        dtypes=np.dtype('f8'))
#    rec = rec_append_fields(rec,
#        names='eta_product_jets',
#        arrs=(kin_arr[:,2,5]*kin_arr[:,3,5]),
#        dtypes=np.dtype('f8'))
#    # M2 = 2 pT1 pT2 ( cosh(eta1-eta2) - cos(phi1-phi2)
#    M2 = kin_arr[:,2,4] * kin_arr[:,3,4] * 2 * (np.cosh(kin_arr[:,2,5]-kin_arr[:,3,5])-np.cos(kin_arr[:,2,6]-kin_arr[:,3,6]))
#    rec = rec_append_fields(rec,
#        names='mass_jet1_jet2',
#        arrs=np.absolute(M2)**0.5,
#        dtypes=np.dtype('f8'))
#    sum_vector_pt2 = np.sum(kin_arr[:,:,1], axis = 1)**2 \
#                  + np.sum(kin_arr[:,:,2], axis = 1)**2
#    rec = rec_append_fields(rec,
#        names='vector_sum_pt',
#        arrs=sum_vector_pt2**0.5,
#        dtypes=np.dtype('f8'))
#
## centrality: exp( -4/(eta1-eta2)^2 (eta- eta1+eta2.2)^2)
#    tau1_centrality = np.exp( \
#            -4 / (kin_arr[:,2,5]-kin_arr[:,3,5])**2 \
#            * (kin_arr[:,0,5]-(kin_arr[:,2,5]+kin_arr[:,3,5])/2)**2 \
#            )
#    tau2_centrality = np.exp( \
#            -4 / (kin_arr[:,2,5]-kin_arr[:,3,5])**2 \
#            * (kin_arr[:,1,5]-(kin_arr[:,2,5]+kin_arr[:,3,5])/2)**2 \
#            )
## No MET centrality - already in ntuples
#    rec = rec_append_fields(rec,
#        names='tau1_centrality',
#        arrs=tau1_centrality,
#        dtypes=np.dtype('f8'))
#    rec = rec_append_fields(rec,
#        names='tau2_centrality',
#        arrs=tau2_centrality,
#        dtypes=np.dtype('f8'))
#
## Tau PT ratio for boosted
#    rec = rec_append_fields(rec,
#        names='ditau_pt_ratio',
#        arrs=(kin_arr[:,0,4]/kin_arr[:,1,4]),
#        dtypes=np.dtype('f8'))

    out_tree = array2tree(rec)
    outfile.cd()
    out_tree.Write(tree.GetName())
